{"version":3,"file":"component---src-pages-about-js-d0f04d0e37c3f7d9ea56.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/images/squared_avatar.jpg","webpack://gatsby-starter-hello-world/./src/puzzle/Tile.js","webpack://gatsby-starter-hello-world/./src/puzzle/Board.js","webpack://gatsby-starter-hello-world/./src/puzzle/Refresh.js","webpack://gatsby-starter-hello-world/./src/puzzle/Puzzle.js","webpack://gatsby-starter-hello-world/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://gatsby-starter-hello-world/./src/pages/about.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/squared_avatar-ade0a26566353052571896e39919121f.jpg\";","import React,{Component} from 'react';\r\n\r\nexport default class Tile extends Component{\r\n    render(){\r\n\r\n        if(this.props.img)\r\n        {\r\n            return(\r\n                <div style={this.props.style} className=\"tile\" key={this.props.originalIndex} onClick={() => {this.props.clickHandler(this.props.currentIndex)}}>\r\n                    <img src={this.props.img} alt=\"tile\"/>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <div style={this.props.style} className=\"tile\" key={this.props.originalIndex} onClick={() => {this.props.clickHandler(this.props.currentIndex)}}>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","import React,{useState,useEffect} from 'react';\r\nimport Tile from './Tile';\r\n\r\nexport default function Board({tileArray,showTime,tileStyle,boardStyle}) {\r\n\r\n    const [tiles,setTiles] = useState([]);\r\n    const [blank,setBlank] = useState(8);\r\n    const [solved,setSolved] = useState(false);\r\n    const [lastTileImg,setLastTileImg] = useState({});\r\n\r\n    useEffect(() => {\r\n        if(tileArray.length > 0){\r\n            let tileCompArray = tileArray.map((imgg,ind) => {\r\n                return {\r\n                    imgg : imgg,\r\n                    currentIndex : ind,\r\n                    originalIndex : ind\r\n                };\r\n            });\r\n    \r\n            tileCompArray.sort(() => Math.random() - 0.5);\r\n    \r\n            tileCompArray.forEach((tile,ind) => {\r\n                tile.currentIndex = ind;\r\n                return tile;\r\n            });\r\n\r\n            let missingTile = Math.floor(Math.random()*tileCompArray.length);\r\n            let missingTileImg = tileCompArray[missingTile].imgg;\r\n            tileCompArray[missingTile].imgg = null;\r\n    \r\n            if(!isSolvable(tileCompArray)){\r\n                // console.log(\"The puzzle cannot be solved\");\r\n                // console.log(\"Tile array length : \"+tiles.length);\r\n                tileCompArray = makeSolvable(tileCompArray);\r\n                // console.log(isSolvable(tileCompArray) ? \"Can be now\" : \"Still nope\");\r\n            }\r\n            // else{\r\n            //     console.log(\"The puzzle can be solved.\")\r\n            // }\r\n    \r\n            setTiles(tileCompArray);\r\n            setSolved(false);\r\n            setBlank(missingTile);\r\n            setLastTileImg(missingTileImg);\r\n        }\r\n    },[tileArray]);\r\n\r\n    useEffect(() => {\r\n        if(!solved && tiles.length>0 && isBoardValid()){\r\n            tiles[blank].imgg = lastTileImg;\r\n            setTiles([...tiles]);\r\n            setSolved(true);\r\n        }\r\n        // else{\r\n        //     console.log(\"Can be solved!\");\r\n        // }\r\n\r\n    },[tiles,blank]);\r\n\r\n    const swapTiles = (arr,i,j) => {\r\n\r\n        let tempTile = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = tempTile;\r\n\r\n        arr[j].currentIndex = j;\r\n        arr[i].currentIndex = i;\r\n\r\n        return arr;\r\n    }\r\n\r\n    const isSolvable = (arr) => {\r\n        return countInversions(arr)%2===0;\r\n    }\r\n\r\n    const countInversions = (arr) => {\r\n        let inv = 0;\r\n\r\n        for(let i=0;i<arr.length - 1;i++){\r\n            for(let j=i+1;j<arr.length;j++){\r\n                if(arr[i].imgg && arr[j].imgg && arr[i].originalIndex > arr[j].originalIndex){\r\n                    inv++;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // console.log(\"INV count \"+inv);\r\n        return inv;\r\n    }\r\n\r\n    const makeSolvable = (tileCompArray) => {\r\n        if(!tileCompArray[0].imgg || !tileCompArray[1].imgg){\r\n            return swapTiles(tileCompArray,7,8);\r\n        }\r\n        return swapTiles(tileCompArray,0,1);\r\n    }\r\n\r\n    const tileHandler = (ind) => {\r\n        \r\n        let dir = -1;\r\n\r\n        if(ind%3!==2 && ind+1 === blank)\r\n            dir = 1;\r\n        else if(ind%3!==0 && ind-1 === blank)\r\n            dir = 3;\r\n        else if(ind>2 && ind-3 === blank)\r\n            dir = 0;\r\n        else if(ind<6 && ind+3 === blank)\r\n            dir = 2;\r\n\r\n        let msg = \"\";\r\n\r\n        switch(dir){\r\n            case 0 : msg = \"Move up\";\r\n            break;\r\n            case 1 : msg = \"Move right\";\r\n            break;\r\n            case 2 : msg = \"Move down\";\r\n            break;\r\n            case 3 : msg = \"Move left\";\r\n            break;\r\n            default : msg = \"No neighboring blank cell\"\r\n        }\r\n\r\n        // console.log(msg);\r\n        // console.log(\"Blank is at \"+blank);\r\n        // console.log(\"--------------\");\r\n\r\n        //swapping\r\n        if(!solved && dir!==-1){\r\n            // console.log(\"---Before swapping---\");\r\n            // console.log(\"Current index is = \"+ind);\r\n            // console.log(\"Blank index is = \"+blank);\r\n\r\n            // let tempTile = tiles[blank];\r\n            // tiles[blank] = tiles[ind];\r\n            // tiles[ind] = tempTile;\r\n\r\n            // tiles[ind].currentIndex = ind;\r\n            // tiles[blank].currentIndex = blank;\r\n\r\n            setBlank(ind);\r\n            setTiles([...swapTiles(tiles,blank,ind)]);\r\n        }      \r\n    }\r\n\r\n    const isBoardValid = () => {\r\n        return tiles.length>1 && tiles.reduce((prev, cur) => {\r\n            return prev && cur.currentIndex === cur.originalIndex;\r\n        },true);\r\n    }\r\n\r\n    return (\r\n    <div className=\"board\" style={solved ? boardStyle : {}}>\r\n        {\r\n            tiles.map(tile => {\r\n                return(\r\n                    <Tile style={solved ? {} : tileStyle} img={tile.imgg} key={tile.originalIndex} currentIndex={tile.currentIndex} originalIndex={tile.originalIndex} clickHandler={tileHandler}/>\r\n                )\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ({clickHandler}) {\r\n  return (\r\n    <div className=\"refresh\">\r\n        <div className=\"icon\" onClick={clickHandler}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-arrow-clockwise\" viewBox=\"0 0 16 16\">\r\n                <path fillRule=\"evenodd\" d=\"M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z\"/>\r\n                <path d=\"M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z\"/>\r\n            </svg>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport img from \"./../images/squared_avatar.jpg\";\r\nimport Board from './Board';\r\nimport Refresh from './Refresh';\r\nimport * as styles from './index.css';\r\n\r\nexport default class Puzzle extends React.Component{\r\n    image = new Image();\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.state = {imagePieces : [], canShow : false};\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.image.src=img;\r\n        this.image.onload = this.cutImageUp;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"puzzle\">\r\n                <Refresh clickHandler={this.refresh}/>\r\n                <Board tileArray={this.state.imagePieces} tileStyle = {{border : \"0.5px rgb(255, 255, 255) solid\"}} boardStyle={{maxWidth : \"301px\"}}/>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    refresh(){\r\n        this.setState({\r\n            imagePieces : [...this.state.imagePieces]\r\n        });\r\n    }\r\n\r\n    cutImageUp = () => {\r\n        let pieces = [];\r\n        const rows = 3;\r\n        const cols = 3;\r\n        const len = this.image.width/3;\r\n    \r\n        for(var x = 0; x < rows; x++) {\r\n            for(var y = 0; y < cols; y++) {\r\n                var canvas = document.createElement('canvas');\r\n                canvas.width = 100;\r\n                canvas.height = 100;\r\n                var context = canvas.getContext('2d');\r\n                context.drawImage(this.image, y * len, x * len,len,len, 0, 0, canvas.width, canvas.height);\r\n                pieces.push(canvas.toDataURL());\r\n            }\r\n        }\r\n        \r\n        this.setState({imagePieces : pieces});\r\n    }\r\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React from 'react';\r\nimport Puzzle from '../puzzle/Puzzle';\r\n\r\nexport default function About() {\r\n    return (\r\n      <div>\r\n        <section id=\"about\" className=\"about\">\r\n            <div className=\"display\">   \r\n              <Puzzle/>\r\n            </div>\r\n            <div className=\"description\">\r\n                <h1>Hola, I'm Amal</h1>\r\n                <ul className=\"custom-list\">\r\n                    <li>I'm a software engineer based out of Bengaluru, India.</li>\r\n                    <li>Dabbling into the world of open source.</li>\r\n                    <li>I try to keep plants alive.</li>\r\n                    <li>Been thinking of climbing a mountain ever since I read <a href=\"https://www.goodreads.com/book/show/1898.Into_Thin_Air\" target = \"_blank\" rel=\"noreferrer\">this.</a></li>\r\n                </ul>\r\n                <br/>\r\n                <p>I'm passionate about creative software, good stories and new places. Always open to new book and music recommendations.</p>\r\n\r\n                <h3>Wanna collaborate on something cool? Hit me up on LinkedIn or Twitter.</h3>\r\n            </div>\r\n        </section>\r\n        <section id=\"work\" className=\"work\">\r\n          <div>\r\n            <h1>Work 👨‍💼</h1>\r\n            <h4>Some of the projects I've worked on, in and out of college.</h4>\r\n          </div>\r\n          <div className=\"projects\">\r\n            <div className=\"project\">\r\n            <a href=\"https://amal329.github.io/pong-game-js/\" target = \"_blank\" rel=\"noreferrer\">\r\n              <h4>Pong - Browser game</h4>\r\n              <p>A humble attempt at recreating the classic Pong game, written in vanilla JavaScript along with some HTML and CSS. Also contains a compelling opponent.</p>\r\n            </a>\r\n            </div>\r\n            <div className=\"project\">\r\n              <h4>Flashcard based revision system</h4>\r\n              <p>A flashcard-based revision system that makes use of spaced repetition to aid in revising topics, built using React and Firebase.</p>\r\n            </div>\r\n            <div className=\"project\">\r\n              <h4>BST Visualizer</h4>\r\n              <p>A BST visualizer written in JavaScript using the D3 visualization library that simulates all operations on a binary search tree.</p>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section id=\"skills\" className=\"skill-sec\">\r\n          <div>\r\n            <h1>Skills 👨‍🔧</h1>\r\n            <h4>Technologies I've picked up over the years.</h4>\r\n          </div>\r\n          <div className=\"skills\">\r\n            <div className=\"skill\">\r\n              <h4>Frontend</h4>\r\n              <ul>\r\n                <li>React</li>\r\n                <li>Bootstrap</li>\r\n                <li>HTML and CSS</li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"skill\">\r\n              <h4>Backend</h4>\r\n              <ul>\r\n                <li>Node.js</li>\r\n                <li>Spring Boot</li>\r\n                <li>MySQL</li>\r\n                <li>MongoDB</li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"skill\">\r\n              <h4>Languages</h4>\r\n              <ul>\r\n                <li>JavaScript</li>\r\n                <li>Java</li>\r\n                <li>C/C++</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        </div>\r\n    )\r\n}\r\n"],"names":["Tile","render","this","props","img","style","className","key","originalIndex","onClick","clickHandler","currentIndex","src","alt","Component","Board","tileArray","tileStyle","showTime","boardStyle","useState","tiles","setTiles","blank","setBlank","solved","setSolved","lastTileImg","setLastTileImg","useEffect","length","tileCompArray","map","imgg","ind","sort","Math","random","forEach","tile","missingTile","floor","missingTileImg","isSolvable","makeSolvable","isBoardValid","swapTiles","arr","i","j","tempTile","countInversions","inv","tileHandler","dir","reduce","prev","cur","xmlns","width","height","fill","viewBox","fillRule","d","Puzzle","image","Image","componentDidMount","onload","cutImageUp","pieces","len","x","y","canvas","document","createElement","getContext","drawImage","push","toDataURL","setState","imagePieces","refresh","bind","self","ReferenceError","state","canShow","Refresh","border","maxWidth","React","About","id","href","target","rel"],"sourceRoot":""}